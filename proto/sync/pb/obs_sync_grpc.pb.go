// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: obs_sync.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PipeClient is the client API for Pipe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipeClient interface {
	DataStream(ctx context.Context, opts ...grpc.CallOption) (Pipe_DataStreamClient, error)
	PutResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Replay, error)
	HasMore(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HasMoreReplay, error)
	Sync(ctx context.Context, in *SyncInfo, opts ...grpc.CallOption) (*SyncReplay, error)
	Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Pipe_StartClient, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StopResult, error)
	Stat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Pipe_StatClient, error)
}

type pipeClient struct {
	cc grpc.ClientConnInterface
}

func NewPipeClient(cc grpc.ClientConnInterface) PipeClient {
	return &pipeClient{cc}
}

func (c *pipeClient) DataStream(ctx context.Context, opts ...grpc.CallOption) (Pipe_DataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pipe_ServiceDesc.Streams[0], "/sync.Pipe/DataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipeDataStreamClient{stream}
	return x, nil
}

type Pipe_DataStreamClient interface {
	Send(*DataRequest) error
	Recv() (*DataResponse, error)
	grpc.ClientStream
}

type pipeDataStreamClient struct {
	grpc.ClientStream
}

func (x *pipeDataStreamClient) Send(m *DataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pipeDataStreamClient) Recv() (*DataResponse, error) {
	m := new(DataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pipeClient) PutResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Replay, error) {
	out := new(Replay)
	err := c.cc.Invoke(ctx, "/sync.Pipe/PutResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeClient) HasMore(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HasMoreReplay, error) {
	out := new(HasMoreReplay)
	err := c.cc.Invoke(ctx, "/sync.Pipe/HasMore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeClient) Sync(ctx context.Context, in *SyncInfo, opts ...grpc.CallOption) (*SyncReplay, error) {
	out := new(SyncReplay)
	err := c.cc.Invoke(ctx, "/sync.Pipe/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeClient) Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Pipe_StartClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pipe_ServiceDesc.Streams[1], "/sync.Pipe/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipeStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pipe_StartClient interface {
	Recv() (*Status, error)
	grpc.ClientStream
}

type pipeStartClient struct {
	grpc.ClientStream
}

func (x *pipeStartClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pipeClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StopResult, error) {
	out := new(StopResult)
	err := c.cc.Invoke(ctx, "/sync.Pipe/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipeClient) Stat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Pipe_StatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pipe_ServiceDesc.Streams[2], "/sync.Pipe/Stat", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipeStatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pipe_StatClient interface {
	Recv() (*StatResult, error)
	grpc.ClientStream
}

type pipeStatClient struct {
	grpc.ClientStream
}

func (x *pipeStatClient) Recv() (*StatResult, error) {
	m := new(StatResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PipeServer is the server API for Pipe service.
// All implementations should embed UnimplementedPipeServer
// for forward compatibility
type PipeServer interface {
	DataStream(Pipe_DataStreamServer) error
	PutResult(context.Context, *Result) (*Replay, error)
	HasMore(context.Context, *Empty) (*HasMoreReplay, error)
	Sync(context.Context, *SyncInfo) (*SyncReplay, error)
	Start(*Empty, Pipe_StartServer) error
	Stop(context.Context, *Empty) (*StopResult, error)
	Stat(*Empty, Pipe_StatServer) error
}

// UnimplementedPipeServer should be embedded to have forward compatible implementations.
type UnimplementedPipeServer struct {
}

func (UnimplementedPipeServer) DataStream(Pipe_DataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DataStream not implemented")
}
func (UnimplementedPipeServer) PutResult(context.Context, *Result) (*Replay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutResult not implemented")
}
func (UnimplementedPipeServer) HasMore(context.Context, *Empty) (*HasMoreReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasMore not implemented")
}
func (UnimplementedPipeServer) Sync(context.Context, *SyncInfo) (*SyncReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedPipeServer) Start(*Empty, Pipe_StartServer) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedPipeServer) Stop(context.Context, *Empty) (*StopResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedPipeServer) Stat(*Empty, Pipe_StatServer) error {
	return status.Errorf(codes.Unimplemented, "method Stat not implemented")
}

// UnsafePipeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipeServer will
// result in compilation errors.
type UnsafePipeServer interface {
	mustEmbedUnimplementedPipeServer()
}

func RegisterPipeServer(s grpc.ServiceRegistrar, srv PipeServer) {
	s.RegisterService(&Pipe_ServiceDesc, srv)
}

func _Pipe_DataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PipeServer).DataStream(&pipeDataStreamServer{stream})
}

type Pipe_DataStreamServer interface {
	Send(*DataResponse) error
	Recv() (*DataRequest, error)
	grpc.ServerStream
}

type pipeDataStreamServer struct {
	grpc.ServerStream
}

func (x *pipeDataStreamServer) Send(m *DataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pipeDataStreamServer) Recv() (*DataRequest, error) {
	m := new(DataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pipe_PutResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeServer).PutResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sync.Pipe/PutResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeServer).PutResult(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipe_HasMore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeServer).HasMore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sync.Pipe/HasMore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeServer).HasMore(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipe_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sync.Pipe/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeServer).Sync(ctx, req.(*SyncInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipe_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PipeServer).Start(m, &pipeStartServer{stream})
}

type Pipe_StartServer interface {
	Send(*Status) error
	grpc.ServerStream
}

type pipeStartServer struct {
	grpc.ServerStream
}

func (x *pipeStartServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func _Pipe_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipeServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sync.Pipe/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipeServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipe_Stat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PipeServer).Stat(m, &pipeStatServer{stream})
}

type Pipe_StatServer interface {
	Send(*StatResult) error
	grpc.ServerStream
}

type pipeStatServer struct {
	grpc.ServerStream
}

func (x *pipeStatServer) Send(m *StatResult) error {
	return x.ServerStream.SendMsg(m)
}

// Pipe_ServiceDesc is the grpc.ServiceDesc for Pipe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pipe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sync.Pipe",
	HandlerType: (*PipeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutResult",
			Handler:    _Pipe_PutResult_Handler,
		},
		{
			MethodName: "HasMore",
			Handler:    _Pipe_HasMore_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Pipe_Sync_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Pipe_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataStream",
			Handler:       _Pipe_DataStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Start",
			Handler:       _Pipe_Start_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stat",
			Handler:       _Pipe_Stat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "obs_sync.proto",
}
